---
jupyter: python3
eval: false
---
# Importation et manipulation de donn√©es spatiales {#sec-chap01}

Dans le chapitre, nous abordons quelques formats d'images ainsi que leur lecture.

::: bloc_package
::: bloc_package-header
::: bloc_package-icon
:::

**Liste des *librairies* utilis√©es dans ce chapitre**
:::

::: bloc_package-body
-   Pour importer et manipuler des fichiers g√©ographiques¬†:
    -   `sf` pour importer et manipuler des donn√©es vectorielles.
    -   `Rasterio` pour importer des images.
    -   `NumPy` pour manipuler des donn√©es matricielles.
-   Pour construire des cartes et des graphiques¬†:
    -   `tmap` est certainement le meilleur *package* pour la cartographie.
    -   `Matplotlib` pour construire des graphiques.
:::
:::

## Bases de Quarto... {#sec-010}

Voici comment faire une liste¬†:

-   **texte en gras**
-   *texte en italique*
    -   ***Gras et italique***
-   R^2^ et NO~2~
-   [Petites majuscules]{.smallcaps}
-   Pour un lien Web, [D√©partement de g√©omatique appliqu√©e](https://www.usherbrooke.ca/geomatique/).

Voici comment int√©grer des √©quations LaTeX. La formule de la distance euclidienne (@eq-DistEuc).
Pour √©crire directement une √©quation dans le texte, il suffit de $E = mc^2$.

$$
 d_{ij} = 2R \cdot \text{ arcsin} \left( \sqrt{\text{sin}^2 \left( \frac{\delta _i - \delta _j}{2} \right) + \text{cos }\delta _i \cdot \text{cos }\delta _j \cdot \text{sin}^2 \left( \frac{\phi _i - \phi _j}{2} \right)} \right)
$$ {#eq-DistLongLat}

$$
 d_{ij} = \sqrt{(x_i-x_j)^2+(y_i-y_j)^2}
$$ {#eq-DistEuc}

-   Int√©grer une figure (image) et l'appeler dans le texte (@fig-downloaffromgit). √Ä la @fig-downloaffromgit, ... Notez que la num√©rotation des figures, des tableaux, des √©quations est automatique.

![T√©l√©chargement de l'int√©gralit√© du livre](images/introduction/download_github.png){#fig-downloaffromgit width="40%" fig-align="center"}


-   Les r√©f√©rences sont au format BibTeX. Par exemple, vous pouvez les t√©l√©charger de Google Scholar et les int√©grer √† la fin du fichier references.bib. Voici comment int√©grer des r√©f√©rences [@mather2022computer; @richards2022remote]. Selon Ferdinand Boon et Guy Rochon [-@PrecisTeleVol1].


Le code R ci-dessous permet de faire un tableau dans un chunk! Pour appeler le tableau (@tbl-TabMatricesSpatiales).


## Importation d'images {#sec-011}

La premi√®re √©tape avant tout traitement est d'acc√©der √† la donn√©e image pour qu'elle soit manipul√©e par le programme Python. L'imagerie satellite pr√©sente certains d√©fis notamment en raison de la taille parfois tr√®s importante des images. Il existe maintenant certaines librairies, comme üîñ[Xarray](https://docs.xarray.dev/en/stable/), qui on cherch√©es √† optimiser la lecture et l'√©criture de grandes images. Il est donc conseiller de toujours garder un oeil sur l'espace m√©moire occup√© par les variables Python reli√©es aux images. La librairie principale en g√©omatique qui va nous permettre d'importer (et d'exporter) de l'imagerie est la librairie [GDAL](https://gdal.org) qui rassemble la plupart des formats sous forme de *driver*. 

Dans le domaine de la g√©omatique, il faut pr√™ter attention √† trois caract√©ristiques principales des images:
1. **La matrice des donn√©es** elle-m√™me qui contient les valeurs brutes des pixels. Cette matrice sera souvent un cube √† trois dimensions. En Python, ce cube sera le plus souvent un objet de la librairie [NumPy](https://numpy.org/) (voir section).
2. **La dynamique des images** c.√†.d le format de stockage des valeurs individuelles (octet, entier, double, etc.). Ce format d√©cide principalement de la r√©solution radiom√©trique et des valeurs minimales et maximales support√©es. 
3. **La m√©tadonn√©e** qui va transporter sur l'information auxiliaire de l'image comme les dimensions et la position de l'image, la date, etc. Cette donn√©e auxiliaire prendra souvent la forme d'un dictionnaire Python. 

Les diff√©rents formats se distinguent principalement sur comment ces trois caract√©ristiques sont g√©r√©es.

### Formats de donn√©es {#sec-0111}

Il existe de nombreux formats pour la donn√©e de type image parfois appel√© donn√©e matricielle ou donn√©e *raster*. La librairie GDAL rassemble la plupart des formats matriciels rencontr√©s en g√©omatique (voir üîñ[Raster drivers ‚Äî GDAL documentation](https://gdal.org/en/latest/drivers/raster/index.html) pour une liste compl√®te).

On peut distinguer deux grandes familles de format:
1. Les formats de type **RVB** issus de l'imagerie num√©rique grand publique comme üîñ[JPEG](https://gdal.org/en/latest/drivers/raster/jpeg.html#raster-jpeg), [png](https://gdal.org/en/latest/drivers/raster/png.html#raster-png), etc. Ces formats ne supportent g√©n√©ralement que trois bandes au maximum (rouge, vert et bleu) et des valeurs de niveaux de gris entre 0 et 255 (format dit 8 bit).
2. **Les g√©o-formats** issus des domaines scientifiques ou techniques comme GeoTIFF, HDF5, etc.

Les formats RVB restent tr√®s utilis√©s en Python notamment dans les librairies dites de vision par ordinateur (*Computer Vision*) comme opencv et sickit-image ainsi que les grandes librairies en apprentissage profond (PyTorch, Tensorflow).  


#### Formats de type RVB {#sec-01111}

Les premiers formats pour de l'imagerie √† une bande (monochrome) et √† trois bandes (image couleur rouge-vert-bleu) sont issus du domaine des sciences de l'ordinateur. On trouvera, entre autres, les formats pbm, png et jpeg. Ces formats supportent peu de m√©tadonn√©es dans un ent√™te (*header*) tr√®s limit√©. Ces formats restent tr√®s populaires dans le domaine de la vision par ordinateur et sont tr√®s utilis√©s en apprentissage profond particulier. Pour la lecture des images RVB, on peut utiliser Rasterio, [PIL](https://he-arc.github.io/livre-python/pillow/index.html) ou [OpenCV](https://docs.opencv.org/4.10.0/index.html).

##### Lecture avec la librairie OpenCV
La librairie PIL retourne un objet de type `PngImageFile`, l'affichage de l'image se fait directement dans la cellule de sortie.

```{python}
#| label: tbl-lecture-PIL-PNG
#| tbl-cap: Lecture d'une image en format PNG avec PIL
#| echo: false
#| eval: false
#| message: false
#| warning: false
!wget https://raw.githubusercontent.com/sfoucher/TraitementImagesPythonVol1/refs/heads/main/images/modis-aqua.PNG
from PIL import Image
img = Image.open('/content/modis-aqua.PNG')
img
```

##### Lecture avec la librairie OpenCV
La librairie [OpenCV](https://docs.opencv.org/4.10.0/index.html) est aussi tr√®s populaire en vision par ordinateur. La fonction `imread` donne directement un objet de type NumPy en sortie.

```{python}
#| label: tbl-lecture-opencv-PNG
#| tbl-cap: Lecture d'une image en format PNG avec OpenCV
#| echo: false
#| eval: false
#| message: false
#| warning: false
!wget https://raw.githubusercontent.com/sfoucher/TraitementImagesPythonVol1/refs/heads/main/images/modis-aqua.PNG
import cv2
img = cv2.imread('/content/modis-aqua.PNG')
img
```
##### Lecture avec la librairie RasterIO

Rien ne nous emp√™che de lire une image de format RVB avec [RasterIO](https://rasterio.readthedocs.io/en/stable/) comme d√©crit dans (@tbl-lecture-rasterio-PNG). Vous noterez cependant les avertissements concernant l'absence de g√©or√©f√©rence pour ce type d'image.

```{python}
#| label: tbl-lecture-rasterio-PNG
#| tbl-cap: Lecture d'une image en format PNG avec OpenCV
#| echo: false
#| eval: false
#| message: false
#| warning: false
!wget https://raw.githubusercontent.com/sfoucher/TraitementImagesPythonVol1/refs/heads/main/images/modis-aqua.PNG
import rasterio
img= rasterio.open('/content/modis-aqua.PNG')
img
```

#### Le format GeoTiff {#sec-01112}

Le format GeoTIFF est une extension du format TIFF (Tagged Image File Format) qui permet d'incorporer des m√©tadonn√©es g√©ospatiales directement dans un fichier image. D√©velopp√© initialement par Dr. Niles Ritter au Jet Propulsion Laboratory de la [NASA](https://www.earthdata.nasa.gov/esdis/esco/standards-and-practices/geotiff){target="_blank"} dans les ann√©es 1990, GeoTIFF est devenu un standard de facto pour le stockage et l'√©change d'images g√©or√©f√©renc√©es dans les domaines de la t√©l√©d√©tection et des syst√®mes d'information g√©ographique (SIG). Ce format supporte plus que trois bandes aussi longtemps que ces bandes sont de m√™me dimension.

Le format GeoTIFF est tr√®s utilis√© et est largement support√© par les biblioth√®ques et logiciels g√©ospatiaux, notamment GDAL (Geospatial Data Abstraction Library), qui offre des capacit√©s de lecture et d'√©criture pour ce format. Cette compatibilit√© √©tendue a contribu√© √† son adoption g√©n√©ralis√©e dans la communaut√© g√©ospatiale.

##### Standardisation par l'OGC {#sec-011121}

Le standard GeoTIFF propos√© par l'Open Geospatial Consortium (OGC) en 2019 formalise et √©tend les sp√©cifications originales du format GeoTIFF, offrant une norme robuste pour l'√©change d'images g√©or√©f√©renc√©es. Cette standardisation, connue sous le nom d'OGC GeoTIFF 1.1 [-@OGCGeoTIFF], apporte plusieurs am√©liorations et clarifications importantes.


#### Le format COG

Une innovation r√©cente dans l'√©cosyst√®me GeoTIFF est le format *Cloud Optimized GeoTIFF* ([COG](http://cogeo.org/)), con√ßu pour faciliter l'utilisation de fichiers GeoTIFF h√©berg√©s sur des serveurs web HTTP. Le COG permet aux utilisateurs et aux logiciels d'acc√©der √† des parties sp√©cifiques du fichier sans avoir √† le t√©l√©charger enti√®rement, ce qui est particuli√®rement utile pour les applications bas√©es sur le cloud.

### M√©tadonn√©es des images {#sec-0112}

## Manipulation d'images {#sec-013}

### Manipulation de la matrice de pixels {#sec-0131}

La donn√©e brute de l'image est g√©n√©ralement contenue dans un cube matricielle √† trois dimensions (deux dimensions spatiales et une dimension spectrale). Comme expos√© pr√©c√©demment, la librairie dite *"fondationnelle"* pour la manipulation de matrices en Python est [NumPy](https://numpy.org/). Cette librairie contient un nombre tr√®s important de fonctionnalit√©s couvrant l'alg√®bre lin√©aires, les statistiques.


### Mosa√Øquage, masquage et d√©coupage {#sec-0132}

### Changement de projection cartographique {#sec-0133}

### Recalage d'images et co-registration {#sec-0134}

### Requ√™tes attributaires {#sec-0135}

### Donn√©es en g√©oscience {#sec-0113}

Calibration, unit√©s, donn√©es manquantes, donn√©es √©parses.

netcdf, xarray, GRIB.

Donn√©es m√©t√©os, exemple avec SWOT.

## Importation de donn√©es vectorielles {#sec-012}

### Importation d'un fichier *shapefile* {#sec-0121}

### Importation d'une couche dans un *GeoPackage* {#sec-0122}

### Importation d'une couche dans une *geodatabase* d'ESRI {#sec-0123}

### Importation d'un fichier *shapefile* {#sec-0124}

## Manipulation de donn√©es vectorielles {#sec-014}

## Quiz de r√©vision du chapitre {#sec-015}

## Exercices de r√©vision {#sec-016}

::: bloc_exercice
::: bloc_exercice-header
::: bloc_exercice-icon
:::

**Exercice 1.** √Ä compl√©ter
:::

::: bloc_exercice-body
```{python}
#| echo: true 
#| message: false 
#| warning: false 
#| eval: false

# ...
# √† compl√©ter
```

Correction √† la [section @sec-08011].
:::
:::

::: bloc_exercice
::: bloc_exercice-header
::: bloc_exercice-icon
:::

**Exercice 2.** √Ä compl√©ter
:::

::: bloc_exercice-body
```{python}
#| echo: true 
#| message: false 
#| warning: false 
#| eval: false

# ...
# √† compl√©ter
```

Correction √† la [section @sec-08012].
:::
:::

::: bloc_exercice
::: bloc_exercice-header
::: bloc_exercice-icon
:::

**Exercice 3.** √Ä compl√©ter
:::

::: bloc_exercice-body
```{python}
#| echo: true 
#| message: false 
#| warning: false 
#| eval: false

# ...
# √† compl√©ter
```

Correction √† la [section @sec-08013].
:::
:::
